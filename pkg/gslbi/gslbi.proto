// Code generated by make; DO NOT EDIT.
syntax = "proto3";
package gslbi.v1;

import "google/protobuf/wrappers.proto";

option go_package = "github.com/snapp-incubator/consul-gslb-driver/pkg/gslbi";


service Identity {
  rpc GetPluginInfo(GetPluginInfoRequest)
    returns (GetPluginInfoResponse) {}

  rpc GetPluginCapabilities(GetPluginCapabilitiesRequest)
    returns (GetPluginCapabilitiesResponse) {}

  rpc Probe (ProbeRequest)
    returns (ProbeResponse) {}
}

service Controller {
  rpc CreateGSLB (CreateGSLBRequest)
    returns (CreateGSLBResponse) {}

  rpc DeleteGSLB (DeleteGSLBRequest)
    returns (DeleteGSLBResponse) {}

  rpc ControllerGetGSLB (ControllerGetGSLBRequest)
    returns (ControllerGetGSLBResponse) {
    }
}

message GetPluginInfoRequest {
  // Intentionally empty.
}

message GetPluginInfoResponse {
  // This field is REQUIRED.
  string name = 1;

  // This field is REQUIRED. Value of this field is opaque to the CO.
  string vendor_version = 2;

  // This field is OPTIONAL. Values are opaque to the CO.
  map<string, string> manifest = 3;
}
message GetPluginCapabilitiesRequest {
  // Intentionally empty.
}
message GetPluginCapabilitiesResponse {
  // All the capabilities that the controller service supports. This
  // field is OPTIONAL.
  repeated PluginCapability capabilities = 1;
}

// Specifies a capability of the plugin.
message PluginCapability {
  message Service {
    enum Type {
      UNKNOWN = 0;
      // CONTROLLER_SERVICE indicates that the Plugin provides RPCs for
      // the ControllerService. Plugins SHOULD provide this capability.
      // In rare cases certain plugins MAY wish to omit the
      // ControllerService entirely from their implementation, but such
      // SHOULD NOT be the common case.
      // The presence of this capability determines whether the CO will
      // attempt to invoke the REQUIRED ControllerService RPCs, as well
      // as specific RPCs as indicated by ControllerGetCapabilities.
      CONTROLLER_SERVICE = 1;
    }
    Type type = 1;
  }

  message HealthCheck {
    enum Type {
      UNKNOWN = 0;

      // HTTP indicates that driver support http healthchecks
      HTTP = 1;

      // TCP indicates tthat driver support tcp healthchecks
      TCP = 2;
    }
    Type type = 1;
  }
  oneof type {
    // Service that the plugin supports.
    Service service = 1;
    HealthCheck health_check = 2;
  }
}

message ProbeRequest {
  // Intentionally empty.
}

message ProbeResponse {
  // Readiness allows a plugin to report its initialization status back
  // to the CO. Initialization for some plugins MAY be time consuming
  // and it is important for a CO to distinguish between the following
  // cases:
  //
  // 1) The plugin is in an unhealthy state and MAY need restarting. In
  //    this case a gRPC error code SHALL be returned.
  // 2) The plugin is still initializing, but is otherwise perfectly
  //    healthy. In this case a successful response SHALL be returned
  //    with a readiness value of `false`. Calls to the plugin's
  //    Controller and/or Node services MAY fail due to an incomplete
  //    initialization state.
  // 3) The plugin has finished initializing and is ready to service
  //    calls to its Controller and/or Node services. A successful
  //    response is returned with a readiness value of `true`.
  //
  // This field is OPTIONAL. If not present, the caller SHALL assume
  // that the plugin is in a ready state and is accepting calls to its
  // Controller and/or Node services (according to the plugin's reported
  // capabilities).
  .google.protobuf.BoolValue ready = 1;
}

message CreateGSLBRequest {
  // The name for the gslb.
  // This field is REQUIRED.
  string name = 1;

  // The name for the service.
  // This field is REQUIRED.
  string service_name = 2;

  // The host address of backend service. Can be IPv4 or DNS Domain
  // This field is REQUIRED.
  string host = 3;

  // Weight
  int32 weight = 4;

  // Plugin specific parameters passed in as opaque key-value pairs.
  // This field is OPTIONAL. The Plugin is responsible for parsing and
  // validating these parameters. COs will treat these as opaque.
  map<string, string> parameters = 5;

}

message CreateGSLBResponse {
  // gslb ID
  // This field is REQUIRED.
  Gslb gslb = 1;
}

message DeleteGSLBRequest {
  // The ID of the GSLB to be created.
  // This field is REQUIRED.
  string gslb_id = 1;
}

message DeleteGSLBResponse {
  // Intentionally empty.
}


message ControllerGetGSLBRequest {

  // The ID of the GSLB to fetch current GSLB information for.
  // This field is REQUIRED.
  string GSLB_id = 1;
}

message ControllerGetGSLBResponse {


  // This field is REQUIRED
  string GSLB = 1;
}


// Information about a specific gslb.
message Gslb {

  // The identifier for this gslb, generated by the plugin.
  // This field is REQUIRED.
  // This field MUST contain enough information to uniquely identify
  // this specific volume vs all other volumes supported by this plugin.
  // This field SHALL be used by the CO in subsequent calls to refer to
  // this volume.
  // The SP is NOT responsible for global uniqueness of gslb_id across
  // multiple SPs.
  string gslb_id = 2;
}
